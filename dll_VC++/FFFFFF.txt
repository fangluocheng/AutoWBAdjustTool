// ColorT.cpp : Defines the entry point for the DLL application.
//

#include "stdafx.h"
#include "ColorT.h"
#include "stdlib.h"

BOOL APIENTRY DllMain( HANDLE hModule, 
                       DWORD  ul_reason_for_call, 
                       LPVOID lpReserved
					 )
{
    switch (ul_reason_for_call)
	{
		case DLL_PROCESS_ATTACH:
		case DLL_THREAD_ATTACH:
		case DLL_THREAD_DETACH:
		case DLL_PROCESS_DETACH:
			break;
    }
    return TRUE;
}


// This is an example of an exported variable
COLORT_API int nColorT=0;

// This is an example of an exported function.
COLORT_API int fnColorT(void)
{
	return 42;
}

// This is the constructor of a class that has been exported.
// see ColorT.h for the class definition
CColorT::CColorT()
{ 
	return; 
}

COLORT_API int _stdcall initColorTemp(int *pTimming, int *pPattern,int *pMaxLV, int *pMinLV, BOOL *pCalibraEN, BOOL *pMiniBriEN, char* ModelFile)
{
	int tempRx=0,tempRy=0,tempGx=0,tempGy=0,tempBx=0,tempBy=0;

	::GetCurrentDirectory(512,buf);
	strcat(buf,"\\");
	strcat(buf,ModelFile);
	strcat(buf,"\\CONFIG.ini");
  
	maxColorRGB_OFF=GetPrivateProfileInt("Color_Level_RGB_OFF","####max",nDefault,buf);
	minColorRGB_OFF=GetPrivateProfileInt("Color_Level_RGB_OFF","####min",nDefault,buf);	
	maxColorRGB_GAN=GetPrivateProfileInt("Color_Level_RGB_GAN","####max",nDefault,buf);
	minColorRGB_GAN=GetPrivateProfileInt("Color_Level_RGB_GAN","####min",nDefault,buf);
	*pMaxLV=GetPrivateProfileInt("Brightness_SPEC","####max",nDefault,buf);
	*pMinLV=GetPrivateProfileInt("Brightness_SPEC","####min",nDefault,buf);

	
	*pCalibraEN=GetPrivateProfileInt("AutoColor_Enable","####",nDefault,buf);
	*pMiniBriEN=GetPrivateProfileInt("MiniBrightness_Enable","####",nDefault,buf);

	*pTimming=GetPrivateProfileInt("CHROMA_SETTING","#####T",nDefault,buf);
	*pPattern=GetPrivateProfileInt("CHROMA_SETTING","#####P",nDefault,buf);

//14000K
	getdata(&Spec14000K,"COOL2");
//13000K
	getdata(&Spec13000K,"COOL1");
//11000K
    getdata(&Spec11000K,"NORMAL");
//9300K
    getdata(&Spec9300K,"WARM1");
//8500K
    getdata(&Spec8500K,"WARM2");
//7500K
    getdata(&Spec7500K,"7500K");
//6500K
    getdata(&Spec6500K,"6500K");
//5800K
    getdata(&Spec5800K,"5800K");
//5000K
    getdata(&Spec5000K,"5000K");
//4000K
    getdata(&Spec4000K,"4000K");
//3000K
	getdata(&Spec3000K,"3000K");
//2600K
    getdata(&Spec2600K,"2600K");
    return true;
}

COLORT_API int _stdcall DeinitColorTemp(char* ModelFile)
{
//    char strTemp[16];
    savedata(&Spec14000K,"COOL2");
    savedata(&Spec13000K,"COOL1");
    savedata(&Spec11000K,"NORMAL");
    savedata(&Spec9300K,"WARM1");
	savedata(&Spec8500K,"WARM2");
	savedata(&Spec7500K,"7500K");
	savedata(&Spec6500K,"6500K");
	savedata(&Spec5800K,"5800K");
	savedata(&Spec5000K,"5000K");
	savedata(&Spec4000K,"4000K");
	savedata(&Spec3000K,"3000K");
	savedata(&Spec2600K,"2600K");
    return true;
}

COLORT_API int _stdcall setColorTemp(int colorTemp, pCOLORSPEC pSpecData)
{
	switch (colorTemp)
	{
	   case 14000:  
           PrimaryData=Spec14000K;
		   break;
	   case 13000: 
           PrimaryData=Spec13000K;
		   break;
	   case 11000:
		   PrimaryData=Spec11000K;   
		   break;
	   case 9300:
		   PrimaryData=Spec9300K;
		   break;		   
	   case 8500:
		   PrimaryData=Spec8500K;
		   break;
	   case 7500:
           PrimaryData=Spec7500K;
		   break;
	   case 6500:
		   PrimaryData=Spec6500K; 
		   break;

	   case 5800:
		   PrimaryData=Spec5800K;
		   break;
	   case 5000:
		   PrimaryData=Spec5000K;
		   break;
       case 4000:  
		   PrimaryData=Spec4000K;
		   break;
	   case 3000:  
           PrimaryData=Spec3000K;
		   break;
	   case 2600:
		   PrimaryData=Spec2600K;
		   break;
       default:
		   break;
	}

    pSpecData->sx=PrimaryData.sx;
    pSpecData->sy=PrimaryData.sy;
	pSpecData->LimLV=PrimaryData.LimLV;
    pSpecData->PriRR=CalcRGB.cRR=PrimaryData.PriRR;
	pSpecData->PriGG=CalcRGB.cGG=PrimaryData.PriGG;
    pSpecData->PriBB=CalcRGB.cBB=PrimaryData.PriBB;
	pSpecData->xt=PrimaryData.xt;
    pSpecData->yt=PrimaryData.yt;
//	CalcGainRx=GainRx;
//	CalcGainRy=GainRy;
//	CalcGainGx=GainGx;
//	CalcGainGy=GainGy;
//	CalcGainBx=GainBx;
//	CalcGainBy=GainBy;
//    delay(40);

//    delay(tolTime);
	if (TRUE==CheckRGBisInRangeOkorNO(PrimaryData))
	{

    }
    return maxColorRGB_GAN;
}

COLORT_API int _stdcall checkColorTemp(pREALCOLOR pGetColor,int colorTemp)
{
	ca_x=pGetColor->sx;
	ca_y=pGetColor->sy;
	ca_lv=pGetColor->Lv;
    if ((ca_x < PrimaryData.sx-PrimaryData.xt)||(ca_x > PrimaryData.sx+PrimaryData.xt)||(ca_y < PrimaryData.sy-PrimaryData.yt)||(ca_y > PrimaryData.sy+PrimaryData.yt))
	{

	   PrimaryData.PriRR=CalcRGB.cRR;
	   PrimaryData.PriGG=CalcRGB.cGG;
	   PrimaryData.PriBB=CalcRGB.cBB;
	//   CurrentData.sx=ca_x;
    //   CurrentData.sy=ca_y;
       return false;
	}
    PrimaryData.PriRR=CalcRGB.cRR;           //For stepbystep adjust.
    PrimaryData.PriGG=CalcRGB.cGG;
    PrimaryData.PriBB=CalcRGB.cBB;
	ReLoadRGB(colorTemp);
    if (ca_lv < PrimaryData.LimLV) return false;
	return true;
}
void AverageData(pCOLORSPEC pColorST)
{
    pColorST->PriRR=(pColorST->PriRR+CalcRGB.cRR)/2;
    pColorST->PriGG=(pColorST->PriGG+CalcRGB.cGG)/2;
    pColorST->PriBB=(pColorST->PriBB+CalcRGB.cBB)/2;
/*	GainRx=(GainRx+CalcGainRx)/2;
	GainRy=(GainRy+CalcGainRy)/2;
	GainGx=(GainGx+CalcGainGx)/2;
	GainGy=(GainGy+CalcGainGy)/2;
	GainBx=(GainBx+CalcGainBx)/2;
	GainBy=(GainBy+CalcGainBy)/2;*/
}
void ReLoadRGB(int colorTemp)
{
switch (colorTemp)
	{
	   case 14000:  
           AverageData(&Spec14000K);        //if (CalcRGB.cGG==128) AverageData(&Spec14000K);
		   break;
	   case 13000:  
           AverageData(&Spec13000K);
		   break;
	   case 11000:    
           AverageData(&Spec11000K);
		   break;
	   case 9300:    
           AverageData(&Spec9300K);
		   break;		   
	   case 8500:  
           AverageData(&Spec8500K);
		   break;
	   case 7500:  
           AverageData(&Spec7500K);
		   break;
	   case 6500: 
           AverageData(&Spec6500K);
		   break;
	   case 1:
           AverageData(&Spec6500K);
		   break;
	   case 5800:  
           AverageData(&Spec5800K);
		   break;
	   case 5000:  
           AverageData(&Spec5000K);
		   break;
       case 4000:
           AverageData(&Spec4000K);
		   break;
	   case 3000: 
           AverageData(&Spec3000K);
		   break;
	   case 2600:
           AverageData(&Spec2600K);
		   break;
       default:
		   break;
	}
}

/////////////////////////////////////////////////////////////////////////////
////////////////////////Add for Colortemperature App.////////////////////////
/////////////////////////////////////////////////////////////////////////////
COLORT_API int _stdcall  adjustColorTemp(int FixValue, BOOL xyAdjMode, BOOL AdjStep, pREALRGB pAdjRGB)
{
    switch (FixValue)
	{
	   case 3:   //  "FixBB"
		   if (AdjStep)    //microStep
		   {
			   if (xyAdjMode)    //yf
			   {
               }

               else    //xf&yf
			   {
			   }
           }
		   else            //StepbyStep
		   {
		   }
		   break;
	   case 1:   //  "FixRR"
		   //TODO
           return false;
		   break;
	   case 2:   //  "FixGG" 
		   if (AdjStep)    //microStep
		   {
			   if (xyAdjMode)    //yf
			   {
               }

               else    //xf&yf
			   {
			   }
           }
		   else            //StepbyStep
		   {
			   if (ca_y < PrimaryData.sy-PrimaryData.yt)
			   {
                   CalcRGB.cBB=PrimaryData.PriBB-1;
                  // VerifyRGB(CalcRGB.cBB);
			   }
			   else
			   {
				   if (ca_y > PrimaryData.sy+PrimaryData.yt)
				   {
					   CalcRGB.cBB=PrimaryData.PriBB+1;
				   }
				   else
				   {
					   if (ca_x > PrimaryData.sx+PrimaryData.xt)
					   {
						   CalcRGB.cRR=PrimaryData.PriRR-1;
					   }
					   else
					   {
						   if (ca_x < PrimaryData.sx-PrimaryData.xt)
						   {
							   CalcRGB.cRR=PrimaryData.PriRR+1;
						   }
					   }
				   }

			   }
		   }
		   break;
       default: 
		   break;
	}
    VerifyRGB(CalcRGB.cRR);
    VerifyRGB(CalcRGB.cBB);
	pAdjRGB->cRR=CalcRGB.cRR;
    pAdjRGB->cGG=CalcRGB.cGG;
	pAdjRGB->cBB=CalcRGB.cBB;
    return true;

}


/*
void VerifyRGB(unsigned int& RGB)
{
	if (RGB<=minColorRGB)
	RGB=minColorRGB;
	else
	if (RGB>maxColorRGB) RGB=maxColorRGB;
}*/

void delay(unsigned milliseconds)
{
	Sleep(milliseconds);
}

 int savedata(pCOLORSPEC pColorST,char* CT)
{
	char strTemp[16];
	char preset[32]="PRESET_VALUE_";
    strcat(preset,CT);
    if (0!=pColorST->PriRR)
	{
	    WritePrivateProfileString(preset,"###R",_itoa(pColorST->PriRR,strTemp,10),buf);
     	WritePrivateProfileString(preset,"###G",_itoa(pColorST->PriGG,strTemp,10),buf);
	    WritePrivateProfileString(preset,"###B",_itoa(pColorST->PriBB,strTemp,10),buf);	
	}
return true;
}


BOOL CheckRGBisInRangeOkorNO(COLORSPEC rgb)
{
	if (rgb.PriRR<=minColorRGB_GAN||rgb.PriRR>maxColorRGB_GAN||rgb.PriGG<=minColorRGB_GAN||rgb.PriGG>maxColorRGB_GAN||rgb.PriBB<=minColorRGB_GAN||rgb.PriBB>maxColorRGB_GAN)
	return false;
	else
	return TRUE;
}
void VerifyRGB(unsigned int& RGB)
{
	if (RGB<=minColorRGB_GAN)
	RGB=minColorRGB_GAN;
	else
	if (RGB>maxColorRGB_GAN) RGB=maxColorRGB_GAN;
}
 int getdata(pCOLORSPEC pColorST,char* CT)
{
	char spec[32]="SPEC_";
	char preset[32]="PRESET_VALUE_";
    char tol[32]="TOL_";
    strcat(spec,CT);
    strcat(preset,CT);
	strcat(tol,CT);
    pColorST->sx=GetPrivateProfileInt(spec,"##x",nDefault,buf);
    pColorST->sy=GetPrivateProfileInt(spec,"##y",nDefault,buf);
    pColorST->LimLV=GetPrivateProfileInt(spec,"##Lv",nDefault,buf);
	pColorST->PriRR=GetPrivateProfileInt(preset,"###R",nDefault,buf);
    pColorST->PriGG=GetPrivateProfileInt(preset,"###G",nDefault,buf);
    pColorST->PriBB=GetPrivateProfileInt(preset,"###B",nDefault,buf);
	pColorST->xt=GetPrivateProfileInt(tol,"###x",nDefault,buf);
    pColorST->yt=GetPrivateProfileInt(tol,"###y",nDefault,buf);
return true;
}